plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.38.0'
}

ext {
    // used only for parser module
    reactor_bom_version = '2020.0.23'

    netty_version = '4.1.81.Final'
    reactor_version = '3.4.23'

    jackson_version = '2.13.4'
    immutables_version = '2.9.0'
    jsr305_version = '3.0.2'
    junit_version = '5.9.0'

    isJitpack = System.getenv("JITPACK") == "true"
    isSnapshot = version.toString().endsWith("-SNAPSHOT")
}

dependencies {
    api project(":api")

    implementation "io.netty:netty-buffer:$netty_version"
    implementation "io.projectreactor:reactor-core:$reactor_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

    compileOnly project(":parser")
    annotationProcessor project(":parser")

    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.ben-manes.versions'

    targetCompatibility = JavaVersion.VERSION_11
    sourceCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly "com.google.code.findbugs:jsr305:$jsr305_version"
    }

    java {
        withJavadocJar()
        withSourcesJar()

        modularity.inferModulePath = true
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        source += fileTree("$buildDir/generated/sources/annotationProcessor/java/main/")

        options {
            encoding = "UTF-8"
            addBooleanOption "html5", true
            addStringOption "encoding", "UTF-8"
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    test {
        useJUnitPlatform()
    }

    archivesBaseName = project == rootProject ? project.name : "tl-parser-$project.name"

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName,
                    'Implementation-Version': archiveVersion
        }
    }
}

description = 'Telegram API entity domain'

sourcesJar {
    dependsOn compileJava
    from "build/generated/sources/annotationProcessor/java/main"
}

configure(allprojects - project(":parser")) {
    apply plugin: 'maven-publish'

    if (!isJitpack && !isSnapshot) {
        apply plugin: 'signing'
    }

    group = 'com.telegram4j'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId archivesBaseName

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    afterEvaluate {
                        name = project.description
                        description = project.description
                    }

                    url = 'https://github.com/Telegram4J/tl-parser'
                    inceptionYear = '2021'

                    developers {
                        developer {
                            name = 'The Telegram4J'
                        }
                    }

                    licenses {
                        license {
                            name = 'GPL-3.0'
                            url = 'https://github.com/Telegram4J/tl-parser/LICENSE'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/Telegram4J/tl-parser'
                        connection = 'scm:git:git://github.com/Telegram4J/tl-parser.git'
                        developerConnection = 'scm:git:ssh://git@github.com:Telegram4J/tl-parser.git'
                    }
                }
            }
        }

        if (!isJitpack) {
            repositories {
                maven {
                    if (isSnapshot) {
                        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                    } else {
                        url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                    }

                    def sonatypeUsername = findProperty('sonatypeUsername')
                    def sonatypePassword = findProperty('sonatypePassword')
                    if (sonatypeUsername != null && sonatypePassword != null) {
                        credentials {
                            username sonatypeUsername
                            password sonatypePassword
                        }
                    }
                }
            }
        }
    }

    if (!isJitpack && !isSnapshot) {
        signing {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            if (signingKey != null && signingPassword != null) {
                useInMemoryPgpKeys(signingKey, signingPassword)
            }
            sign publishing.publications.mavenJava
        }
    }
}
