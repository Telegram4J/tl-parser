apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    reactor_bom_version = '2020.0.13'
    jackson_version = '2.13.1'
    immutables_version = '2.9.0'
    javax_annotation = '1.3.2'
    junit_version = '5.8.2'
    javapoet_version = '1.13.0'

    isJitpack = System.getenv("JITPACK") == "true"
    isSnapshot = version.toString().endsWith("-SNAPSHOT")
}

dependencies {
    api project(":api")

    api "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    compileOnly "javax.annotation:javax.annotation-api:$javax_annotation"
    compileOnly "org.immutables:value:$immutables_version"
    annotationProcessor "org.immutables:value:$immutables_version"
    compileOnly project(":parser")
    annotationProcessor project(":parser")

    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    if (!isJitpack && !isSnapshot) {
        apply plugin: 'signing'
    }

    group = 'io.github.telegram4j'
    description = 'Telegram API schema parser'
    version = '0.1.1-SNAPSHOT'

    targetCompatibility = JavaVersion.VERSION_11
    sourceCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        api platform("io.projectreactor:reactor-bom:$reactor_bom_version")

        api "io.projectreactor.netty:reactor-netty"
        api "io.projectreactor.addons:reactor-extra"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }

    tasks.withType(Javadoc) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        options {
            encoding = "UTF-8"
            addStringOption "encoding", "UTF-8"
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

subprojects {
    archivesBaseName = "tl-parser-$project.name"

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName,
                    'Implementation-Version': archiveVersion,
                    'Automatic-Module-Name': "telegram4j.tl.$project.name"
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'telegram4j.tl',
                'Implementation-Version': archiveVersion,
                'Automatic-Module-Name': 'telegram4j.tl'
    }
}

configure(subprojects - project(":parser") + project){
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId archivesBaseName

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = "$project.name"
                    description = 'Telegram API schema parser'
                    url = 'https://github.com/Telegram4J/tl-parser'
                    inceptionYear = '2021'

                    developers {
                        developer {
                            name = 'The Telegram4J'
                        }
                    }

                    licenses {
                        license {
                            name = 'GPL-3.0'
                            url = 'https://github.com/Telegram4J/tl-parser/LICENSE'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/Telegram4J/tl-parser'
                        connection = 'scm:git:git://github.com/Telegram4J/tl-parser.git'
                        developerConnection = 'scm:git:ssh://git@github.com:Telegram4J/tl-parser.git'
                    }
                }
            }
        }

        if (!isJitpack) {
            repositories {
                maven {
                    if (isSnapshot) {
                        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                    } else {
                        url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                    }

                    def sonatypeUsername = findProperty('sonatypeUsername')
                    def sonatypePassword = findProperty('sonatypePassword')
                    if (sonatypeUsername != null && sonatypePassword != null) {
                        credentials {
                            username sonatypeUsername
                            password sonatypePassword
                        }
                    }
                }
            }
        }
    }

    if (!isJitpack && !isSnapshot) {
        signing {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            if (signingKey != null && signingPassword != null) {
                useInMemoryPgpKeys(signingKey, signingPassword)
            }
            sign publishing.publications.mavenJava
        }
    }
}

test {
    useJUnitPlatform()
}

sourceSets.main.java.srcDirs += "build/generated/sources/annotationProcessor/java/main"
